public with sharing class WeekTwoHomework {
    public static void getContactsList() {
        //Query for a list of contacts and includes the account name, id and its Industry
        List<Contact> acctContacts = [SELECT Id, AccountId, Account.Name, Account.Industry FROM Contact];
        for(Contact c : acctContacts){
            //If the contact has an account, print out the contact's account name and Industry
            if(c.Account != null){
                System.debug('Account Name: ' + c.Account.Name +', Industry : ' + c.Account.Industry);                
			//If the contact does not have an associated account, go down this path.
            } else {
                System.debug('No associated account.');
            }
        }
            System.Debug(acctContacts);
    }
    
    public static void getAcctsWonOppts(){
		//Query a list of accounts with stage 'Closed Won' opportunities
        List<Account> acctsWonOppts = [SELECT Id, Name,(SELECT Id, Name, StageName FROM Opportunities WHERE StageName = 'Closed Won')
        	FROM Account WHERE Id IN (SELECT AccountId FROM Opportunity WHERE StageName = 'Closed Won')
		];
		//Print out list of accounts with closed won opportunities.       
        for(Account accts : acctsWonOppts){
            if(accts.Opportunities != null){
                System.debug('Account Name: ' + accts.Name);
            //If there is no associated opportunity with a closed/won opportunity go down this path and basically do nothing.
            } else {
                System.debug('No won opportunities related to account.');
            }
        } 
        System.debug(acctsWonOppts);
        //Count number of opportunities that are closed won on an account and group by the account name
		List<AggregateResult> sumOpptysWonByAccount = [SELECT AccountId, COUNT(Id) total FROM Opportunity WHERE StageName = 'Closed Won' GROUP BY AccountId];
        //Print out list of closed/won opptys by account and grouped by account name
        for(AggregateResult ar : sumOpptysWonByAccount){
            System.debug('aggregateAccount Name: ' + ar.get('AccountId'));
            System.debug('aggregateTotal # of won opptys: ' + ar.get('total'));
        }
    }
    
    public static void getMapAcctsWithWonOpptys(){
        //This aggregate query counts all won opportunities grouped by Account Id.
        //Note: Despite my attempts, I found that you cannot GROUP BY account.name directly in a SOQL query.
        //Note: COUNT(Id) returns a whole number. The result of COUNT() in an AggregateResult is returned as a 'Long' not an integer.
        List<AggregateResult> sumOpptysWonByAcct = [SELECT AccountId, COUNT(Id) total FROM Opportunity WHERE StageName = 'Closed Won' GROUP BY AccountId];
   		
        Set<Id> acctIds = new Set<Id>();
        System.debug('Pull all account Ids: ' + acctIds);
        
        for (AggregateResult ar : sumOpptysWonByAcct){
            Id acctId = (Id) ar.get('AccountId');
            acctIds.add(acctId);
            System.debug('Account ID: ' + acctId);
        }
        
        Map<Id, Account> acctMap = new Map<Id, Account>(
           [SELECT Id, Name FROM Account WHERE Id IN :acctIds]
        );
        
        //Add account name that is correlated to its closed/won opportunity in the print log
        //Important! Asked ChatGPT for support on what I was doing wrong with grabbing the string account name variable - line 63 and 66.
        for(AggregateResult ar: sumOpptysWonByAcct){
            Id acctId = (Id)ar.get('AccountId');
            //The 'Long' type is being used to caputre the count of opptys returned by the aggregate query.
            //To safely handle large counts, you must cast the value to 'Long' similar to what is on line 66
            Long total = (Long)ar.get('total');
            String acctName = acctMap.containsKey(acctId) ? acctMap.get(acctId).Name : 'Uknown';
        	System.debug('Account ID: ' + acctId + ', Account Name: ' + acctName + ', Total OPpty: ' + total);
        }
    }              
}
